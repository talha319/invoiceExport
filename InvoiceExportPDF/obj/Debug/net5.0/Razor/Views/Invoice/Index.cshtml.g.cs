#pragma checksum "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0a5492ea70b7c6e6be947a0c99445e49144084ec"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Invoice_Index), @"mvc.1.0.view", @"/Views/Invoice/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\_ViewImports.cshtml"
using InvoiceExportPDF;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\_ViewImports.cshtml"
using InvoiceExportPDF.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0a5492ea70b7c6e6be947a0c99445e49144084ec", @"/Views/Invoice/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d2f0988c751d49927af93ba0aa10e488d5cb8632", @"/Views/_ViewImports.cshtml")]
    public class Views_Invoice_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<InvoiceExportPDF.Data.Product>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml"
  
    ViewData["Title"] = "Invoices";
    var productList = ViewBag.Product;
    int i = 1;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            WriteLiteral(@"<div class=""row"">
    <div class=""col-sm"" style=""display: flex; justify-content: space-between; align-items: flex-end;"">
        <div class=""form-group"">
            <label id=""invMonth"" class=""control-label""> Select Invoice Month</label>
            <input type=""month"" class=""form-control"" id=""invMonth"" onchange=""DatePick(this)"" />
        </div>
        <div class=""form-group"">

            <input type=""button"" class=""btn btn-success"" id=""invoiceSubmit"" value=""Export Invoice"" onclick=""SaveProduct()"" />
        </div>
    </div>
</div>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0a5492ea70b7c6e6be947a0c99445e49144084ec4077", async() => {
                WriteLiteral("\r\n    <table id=\"tblCustomers\" class=\"table\">\r\n        <thead>\r\n            <tr>\r\n                <th>Quantity</th>\r\n                <th>Product</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n");
                WriteLiteral("        </tbody>\r\n        <tfoot>\r\n            <tr>\r\n                <td><input type=\"number\" id=\"txtQty\" class=\"form-control\" /></td>\r\n                <td>\r\n                    <select id=\"ddlProducts\" class=\"form-control\">\r\n");
#nullable restore
#line 77 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml"
                         foreach (var item in ViewBag.Product)
                        {


#line default
#line hidden
#nullable disable
                WriteLiteral("                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0a5492ea70b7c6e6be947a0c99445e49144084ec5175", async() => {
#nullable restore
#line 80 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml"
                                                                                      Write(item.Name);

#line default
#line hidden
#nullable disable
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                BeginWriteTagHelperAttribute();
#nullable restore
#line 80 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml"
                               WriteLiteral(item.Id + "," + item.Price + "," +item.Gsttex);

#line default
#line hidden
#nullable disable
                __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = __tagHelperStringValueBuffer;
                __tagHelperExecutionContext.AddTagHelperAttribute("value", __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
#nullable restore
#line 83 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml"
                                                                  

                        }

#line default
#line hidden
#nullable disable
                WriteLiteral("                    </select>\r\n");
                WriteLiteral("\r\n                </td>\r\n                <td><input type=\"button\" class=\"btn btn-success\" id=\"btnAdd\" value=\"Add\" /></td>\r\n            </tr>\r\n        </tfoot>\r\n    </table>\r\n");
                WriteLiteral("    <div id=\"InvoiceLists\"></div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        var ProductArray = [];
        const workingDates = [];
        const holidayDates = [];
        var isError = true;
        $(""body"").on(""click"", ""#btnAdd"", function () {
            var txtQty = $(""#txtQty"");
            var txtCountryValue = $(""#ddlProducts"");
            var txtCountry = $(""#ddlProducts option:selected"").text();

            if (txtQty.val() == null || txtQty.val() == '' || txtQty.val() == 0) {
                $(""#txtQty"").css('border', 'solid 1px red');
                isError = true;
            }
            if ($(""#ddlProducts"").val() == null || $(""#ddlProducts"").val() == '' || $(""#ddlProducts"").val() == 0) {
                $(""#ddlProducts"").css('border', 'solid 1px red');
                isError = true;
            }
            else if (txtQty.val() != """" && $(""#ddlProducts"").val() != 0){
                $(""#txtQty"").css('border', '1px solid #ced4da');
                $(""#ddlProducts"").css('border', '1px solid #ced4da');
                i");
                WriteLiteral(@"sError = false;
            }


            if (isError==false)
             {
                var tBody = $(""#tblCustomers > TBODY"")[0];
                var row = tBody.insertRow(-1);
                var cell = $(row.insertCell(-1));
                cell.html(txtQty.val());
                cell = $(row.insertCell(-1));
                cell.html(txtCountry);
                cell = $(row.insertCell(-1));
                var obj1 = { ""ProductName"": txtCountry, ""Quantity"": txtQty.val(), ""ProductID"": $(""#ddlProducts"").val()}
                ProductArray.push(obj1);
                var btnRemove = $(""<input />"");
                btnRemove.attr(""type"", ""button"");
                btnRemove.attr(""class"", ""btn btn-danger"");
                btnRemove.attr(""onclick"", ""Remove(this);"");
                btnRemove.val(""Remove"");
                cell.append(btnRemove);
                txtQty.val("""");
                $(""#ddlProducts"").val('0');
               // txtCountry
                console.log(P");
                WriteLiteral(@"roductArray);
            }

        });
        function Remove(button) {
            var row = $(button).closest(""TR"");
            var name = $(""TD"", row).eq(0).html();
            if (confirm(""Do you want to delete: "" + name)) {
                var table = $(""#tblCustomers"")[0];
                table.deleteRow(row[0].rowIndex);
            }
        };

        function DatePick(month) {

            var d = new Date($(month).val());
            d = new Date(d.getFullYear(), d.getMonth(), 15);
            var month;
            var totalWorkdays = 0;
            var totalHolidaydays = 0;
            const dates = [];

            function getAllDaysInMonth(year, month) {
                const date = new Date(year, month, 1);

               // const dates = [];

                while (date.getMonth() === month) {
                    dates.push(new Date(date));
                    date.setDate(date.getDate() + 1);
                }

                return dates;
           ");
                WriteLiteral(@" }
            getAllDaysInMonth(d.getFullYear(), d.getMonth());

            for (var i = 0; i < dates.length; i++) {
                let day = dates[i].getDay();
                if (day == 1 || day == 2 || day == 3 || day == 4 || day == 5 || day == 6)
                {
                    workingDates.push(dates[i]);
                    totalWorkdays++
                }
                if (day == 0)
                {
                    holidayDates.push(dates[i]);
                    totalHolidaydays++
                }
            }

            console.log(""WORKING DAYS = "" + totalWorkdays);
            console.log(""Holiday DAYS = "" + totalHolidaydays);
            console.log(""Holiday DAYS = "" + holidayDates);
            console.log(""Holiday DAYS = "" + workingDates);
            const date = new Date('2022-06-04');

            // 👇️ All days in March of 2022
            console.log(getAllDaysInMonth(d.getFullYear(), d.getMonth()));

        };



        function SavePro");
                WriteLiteral(@"duct() {
            console.log(""this is saveFee"");
    
            //var data = JSON.stringify({
            //    //test:""1""
            //    BussinessDays: workingDates
            //    //HolidaysDays: holidayDates,
            //    //Products: ProductArray
            //});
            debugger
            $.ajax({
                url: """);
#nullable restore
#line 226 "F:\Dev\InvoiceExportPDF\InvoiceExportPDF\Views\Invoice\Index.cshtml"
                 Write(Url.Content("~/Invoice/InvoiceProcess"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@""",
                type: ""GET"",
                //contentType: ""application/json"",
                //contentType: 'application/json; charset=UTF-8',
                //dataType: 'HTML',
                dataType: 'JSON',
                data: {
                    BussinessDays: JSON.stringify(workingDates),
                    HolidaysDays: JSON.stringify(holidayDates),
                    Products: JSON.stringify(ProductArray) },
                success: function (result) {
                 //   alert(data);
                    //$('#InvoiceLists').html(result);
                    window.location.href = result.redirectUrl;
                    //data, status
                   // $(""#InvoiceLists"").load(""/Invoice/InvoiceProcess"");
                },
                error: function (status) {
                    alert('error' + status);
                }
            });

            ////showLoader();
            //if (isError == false) {
            //    if (lstFees != null) {
       ");
                WriteLiteral(@"     //        $.ajax({
            //            contentType: 'application/json; charset=utf-8',
            //            dataType: 'json',
            //            type: ""POST"",
            //            url: ""/CoveredEntity/SaveFeeState"",
            //            data: JSON.stringify(lstFees),
            //            success: function (resp) {
            //                if (objForm != null) {
            //                    SaveInsuranceExclusion(objForm);


            //                }
            //            },
            //            error: function (err) {
            //                console.log(err);
            //            }

            //        });
            //    }
            //    else {
            //        if (objForm != null)
            //            onFormSubmit(objForm);
            //    }
            //}


            //return !isError;

        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<InvoiceExportPDF.Data.Product> Html { get; private set; }
    }
}
#pragma warning restore 1591
